#version 150

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

//***** begin interface of sphere_lib.glvs ***********************************
void output_sphere_parameter_space(in vec4 sphere, in mat4 MV, in mat4 iMV, in mat4 MVP, in mat3 NM);
//***** end interface of sphere_lib.glvs ***********************************

uniform float radius_scale;

in vec4  position;
in float radius;
in vec4  color;
in int   group_index;

out mat3  NM;
out mat4  MV;
out mat4  MVP;
out vec4  color_gs;

//***** begin interface of group.glsl ***********************************
vec4 group_color(in vec4 color, int group_index);
vec3 group_transformed_position(in vec3 position, int group_index);
vec3 group_transformed_normal(in vec3 nml, int group_index);
void right_multiply_group_normal_matrix(inout mat3 NM, int group_index);
void right_multiply_group_position_matrix(inout mat4 MV, int group_index);
void right_multiply_group_normal_matrix_and_rotation(inout mat3 NM, int group_index, vec4 rotation);
void right_multiply_group_position_matrix_and_rigid(inout mat4 MV, int group_index, vec4 rotation, vec3 translation);
//***** end interface of group.glsl ***********************************

void main()
{
	vec4 sphere;
	sphere.xyz = position.xyz / position.w;
	sphere.w = radius_scale * radius;
	//	sphere.w = 0.01;

	// compute normal transformation matrix
	NM = get_normal_matrix();
	right_multiply_group_normal_matrix(NM, group_index);
	// compute position transformation matrix
	MV = get_modelview_matrix();
	right_multiply_group_position_matrix(MV, group_index);
	MVP = get_modelview_projection_matrix();
	right_multiply_group_position_matrix(MVP, group_index);
	// compute sphere color
	color_gs = group_color(color, group_index);
	
	mat4 iMV = inverse(MV);
	output_sphere_parameter_space(sphere, MV, iMV, MVP, NM);

	gl_Position = sphere;
}