#version 150 compatibility
#extension GL_EXT_geometry_shader4 : enable

uniform bool cull_backfacing;
uniform uint width;
uniform uint height;
uniform float point_size;
uniform bool orient_splats;
uniform float outline_width_from_pixel;
uniform float percentual_outline_width;
uniform float pixel_extent_per_depth;

in vec3 normal_gs[];
in vec4 color_gs[];

out vec3 normal;
out vec2 uv;
out vec4 color;
out vec3 position;
out vec2 position_pixel;
out float percentual_outline_start;
out float percentual_pixel_extent;
out float percentual_splat_size;

void emit_corner(in vec3 corner, in float u, in float v)
{
	position = corner;

	uv = vec2(u,v);

	// compute position in clip space
	gl_Position	   = gl_ProjectionMatrix * vec4(position,1.0);

	EmitVertex();
}

void main()
{
	// transform normal to eye space
	normal   = gl_NormalMatrix*(normal_gs[0]);

	// transform point location to pixel coordinates
	vec4 position_clip = gl_ModelViewProjectionMatrix * gl_PositionIn[0];
	vec2 position_screen = position_clip.xy / position_clip.w;
	position_pixel = 0.5*(position_screen + vec2(1.0,1.0))*vec2(float(width),float(height));

	// perform splat culling
	if ( cull_backfacing && (normal.z > 0.0) ||
	    !cull_backfacing && (abs(normal.z) > 0.0001)) {
	
		// pass through the color
		color = color_gs[0];

		// transform position to eye space
		vec3 position_eye = (gl_ModelViewMatrix*gl_PositionIn[0]).xyz;

		// compute percentual size of splat and its radius
		float depth = abs(position_eye.z);
		float point_radius = 0.5 * point_size;
		percentual_pixel_extent = pixel_extent_per_depth * depth / point_radius;
		float percentual_outline_width_final = max(percentual_outline_width, outline_width_from_pixel * percentual_pixel_extent);

		percentual_splat_size    = 1.0 + 0.5 * (percentual_outline_width_final + percentual_pixel_extent);
		percentual_outline_start = 1.0 - 0.5 * (percentual_outline_width_final + percentual_pixel_extent);
		float splat_radius = point_radius * percentual_splat_size;

		// compute splat base vectors and scale by splat radius
		vec3 dx = vec3(1.0 ,0.0, 0.0);
		vec3 dy = vec3(0.0, 1.0, 0.0);

		if (orient_splats) {
			dx = normalize(cross(dy, normal));
			dy = cross(normal, dx);
		}
		dx *= splat_radius;
		dy *= splat_radius;

		// generate splat vertices
		emit_corner(position_eye + dx - dy,  percentual_splat_size, -percentual_splat_size);
		emit_corner(position_eye + dx + dy,  percentual_splat_size,  percentual_splat_size);
		emit_corner(position_eye - dx - dy, -percentual_splat_size, -percentual_splat_size);
		emit_corner(position_eye - dx + dy, -percentual_splat_size,  percentual_splat_size);
	}
}
